package sino.java.thread;

import java.net.Socket;
import java.util.List;
import sino.java.run.Running;
import sino.java.tool.ClockTools;
import sino.java.tool.FileTools;
import sino.java.tool.SockTools;

public class MyThread implements Runnable{
	
	SockTools sockTools =new SockTools();
	FileTools ftools = new FileTools();
	ClockTools ctools = new ClockTools();
	String pid;
	
	private Object lock;
	
	private Socket sockfd ;
	
	private List<byte[]> list;

	public MyThread(Object lock,Socket sockfd ,List<byte[]> list) {
		this.lock = lock;
		this.sockfd = sockfd;
		this.list = list;
		this.pid = Thread.currentThread().getId()+"";
	}

	public void run() {
		int rc = 0;
		byte[] recvbuf = new byte[8192];
		
		while(true) {
			if(MyThreadParameter.TOTAL <= 0) {
				if(Running.LOOP){
					MyThreadParameter.TOTAL = 100000;
					MyThreadParameter.COUNT = 0;
					MyThreadParameter.SUCCESS = 0;
//					MyThreadParameter.ERROR = 0;
				}else{
					sockTools.closeSocket(sockfd);
					return ;
				}
			}

			if((rc=action(recvbuf)) < 0) {
				count(rc,recvbuf);
			}else {
				count(rc,recvbuf);
			}
			
		}
	}
	
	public  void  count(int flag,byte[] recvbuf) {
		int show_info = 10000;
		String msg = null;
		
		synchronized (lock) {
			//处理完毕
			if(MyThreadParameter.TOTAL<=0) {
				return;
			}
			
			//添加计数   flag<0  出错
			if(flag<0) {
				MyThreadParameter.TOTAL--;
				MyThreadParameter.COUNT++;
				MyThreadParameter.ERROR++;
				
				//log
				switch(flag) {
					case -201:
					case -202:
						break;
					default:
						msg = "["+pid+"] "+
								"["+ctools.getDateTime()+"] "+
								"["+Running.IP+"] "+
								"["+new String(recvbuf,2,4)+"] "+
								'\n';
						ftools.logInfo(Running.LOG_PATH, msg);
						break;
				}
				
				try {
					Thread.sleep(Running.WAIT_TIME);
					while((this.sockfd=sockTools.restartSocket(sockfd,Running.IP, Running.PORT, Running.TIMEOUT)) == null) ;
				} catch (InterruptedException e) {
					e.printStackTrace();
				}
				
			}else {
				MyThreadParameter.TOTAL--;
				MyThreadParameter.COUNT++;
				MyThreadParameter.SUCCESS++;
			
				//打印信息时间
				if (Running.VIEW) {
					show_info = 100000;
				}
				//打印信息
				if(MyThreadParameter.COUNT%show_info==0)
					System.out.println("> PID:"+pid+
							" COUNT:"+MyThreadParameter.COUNT+
							" SUCCESS:"+MyThreadParameter.SUCCESS+
							" ERROR:"+MyThreadParameter.ERROR+
							" IP:"+Running.IP+
							" DATE:"+ctools.getDateTime()
							);
			}
		}
	}
	
	public int action(byte[] recvbuf) {
		SockTools sockTools = new SockTools();
		int rc = 0;
		for (byte[] bs : list) {
			if((rc = sockTools.sendCmd(sockfd, bs, bs.length, recvbuf)) < 0) {
				return rc;
			}
		}
		return 0;
	}
}

package sino.gmn.controller;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import jxl.Sheet;
import jxl.Workbook;
import jxl.read.biff.BiffException;
import jxl.write.Label;
import jxl.write.WritableSheet;
import jxl.write.WritableWorkbook;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.commons.CommonsMultipartFile;
import sino.gmn.model.Cmd;
import sino.gmn.model.Page;
import sino.gmn.service.CmdService;
import sino.gmn.service.SocketService;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import java.io.*;
import java.net.Socket;
import java.util.List;
import java.util.Map;

@Controller
@RequestMapping("/cmd")
public class CmdController {

    @Autowired
    private CmdService cmdService;

    @Autowired
    private SocketService socketService;


    @RequestMapping("request")
    public String cmdRequest(){
        return "cmd/cmdRequest";
    }

    @RequestMapping("add")
    public String addPage(){
        return "cmd/cmdAdd";
    }

    @RequestMapping("insert")
    @ResponseBody
    public Object add( Cmd cmd){
       return cmdService.insertCmd(cmd);
    }

    @RequestMapping(value="show")
    public String show(){
        return "cmd/cmdShow";
    }

    @RequestMapping(value="selectPage",produces="text/html;charset=UTF-8")
    @ResponseBody
    public Object selectPage(Page page) throws JsonProcessingException {
        Map<String,Object> map = cmdService.findPage(page);
        return new ObjectMapper().writeValueAsString(map);
    }

    @RequestMapping("/update")
    public String updatePage(HttpServletRequest request ,int cId){
        Cmd cmd = cmdService.selectByPrimaryKey(cId);
        request.setAttribute("cmd",cmd);
        return "cmd/cmdUpdate";
    }

    @RequestMapping("/updateCmd")
    @ResponseBody
    public Object updateCmd(Cmd cmd){
        return cmdService.updateByPrimaryKey(cmd);
    }

    @RequestMapping("/remove")
    @ResponseBody
    public Object remove(int cId){
        return cmdService.removeCmd(cId);
    }

    @RequestMapping("/connect")
    @ResponseBody
    public Object connect(String ip, int port, HttpSession session){
        session.setAttribute("ip",ip);
        session.setAttribute("port",port);

        Socket socket = socketService.hsmConnect(ip,port,3000);
        if(null == socket){
            return -1;
        }else{
            socketService.hsmClose(socket);
        }
        return 0;
    }

    @RequestMapping("/sendCmd")
    @ResponseBody
    public Object send(String cmd, String ip, int port){
        Map<String,Object> map;
        map = socketService.hsmAtion(ip,port,3000,cmd);
        return map;
    }

    @RequestMapping("export")
    public void exportData(HttpServletResponse response) throws Exception {
        String filename = "backup.xls";
        response.setContentType(MediaType.APPLICATION_OCTET_STREAM_VALUE);
        response.setHeader("Content-Disposition","attachment;filename="+filename);
        List<Cmd> list = cmdService.findAllCmd();

        int col ;
        WritableWorkbook wk = Workbook.createWorkbook(response.getOutputStream());
        WritableSheet sheet = wk.createSheet("data",0);
        for(int i=0; i<list.size();i++){
            col = 0;
            sheet.addCell(new Label(col++,i,list.get(i).getcId()+""));
            sheet.addCell(new Label(col++,i,list.get(i).getcCmd()));
            sheet.addCell(new Label(col++,i,list.get(i).getcRequest()));
            sheet.addCell(new Label(col++,i,list.get(i).getcResponse()));
            sheet.addCell(new Label(col++,i,list.get(i).getcDescrible()));
            sheet.addCell(new Label(col++,i,list.get(i).getcFlag()+""));
        }
        wk.write();
        wk.close();
    }

    @RequestMapping("import")
    public String importPage(){
        return "cmd/cmdImport";
    }

    @RequestMapping("cmdImport")
    public void cmdImport(@RequestParam("file") MultipartFile file){
        if(null == file){
            return ;
        }

        Workbook wk = null;
        String info;
        Cmd cmd = new Cmd();
        int num;
        try {
            wk = Workbook.getWorkbook(file.getInputStream());

        } catch (IOException e) {
            e.printStackTrace();
        } catch (BiffException e) {
            e.printStackTrace();
        }

        Sheet sheet = wk.getSheet(0);
        int row = sheet.getRows();
        int col = sheet.getColumns();
        for(int i=0;i<row;i++) {
//            for(int j=0;j<col;j++){
//                System.out.print(sheet.getCell(j,i).getContents()+" ");
//            }
//            System.out.println();
            num = 0;
            info = sheet.getCell(num++, i).getContents();
            cmd.setcId(Integer.parseInt(info));
            info = sheet.getCell(num++, i).getContents();
            cmd.setcCmd(info);
            info = sheet.getCell(num++, i).getContents();
            cmd.setcRequest(info);
            info = sheet.getCell(num++, i).getContents();
            cmd.setcResponse(info);
            info = sheet.getCell(num++, i).getContents();
            cmd.setcDescrible(info);
            info = sheet.getCell(num++, i).getContents();
            cmd.setcFlag(Integer.parseInt(info));
            cmdService.insertCmd(cmd);
        }
        wk.close();

    }
}
